{"version":3,"sources":["static/js/termynal.js"],"names":["Termynal","container","options","document","querySelector","pfx","prefix","startDelay","parseFloat","getAttribute","typeDelay","lineDelay","progressLength","progressChar","progressPercent","cursor","lineData","lineDataToElements","noInit","init","lines","querySelectorAll","concat","containerStyle","getComputedStyle","style","width","undefined","minHeight","height","setAttribute","innerHTML","start","_wait","type","line","delay","progress","appendChild","removeAttribute","chars","textContent","char","repeat","i","length","percent","Math","round","slice","time","Promise","resolve","setTimeout","map","div","createElement","_attributes","value","firstElementChild","attrs","prop","currentScript","hasAttribute","containers","split","forEach"],"mappings":"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","file":"termynal.d1427b27.js","sourceRoot":"..","sourcesContent":["/**\n * termynal.js\n * A lightweight, modern and extensible animated terminal window, using\n * async/await.\n *\n * @author Ines Montani <ines@ines.io>\n * @version 0.0.1\n * @license MIT\n */\n\n'use strict';\n\n/** Generate a terminal widget. */\nclass Termynal {\n    /**\n     * Construct the widget's settings.\n     * @param {(string|Node)=} container - Query selector or container element.\n     * @param {Object=} options - Custom settings.\n     * @param {string} options.prefix - Prefix to use for data attributes.\n     * @param {number} options.startDelay - Delay before animation, in ms.\n     * @param {number} options.typeDelay - Delay between each typed character, in ms.\n     * @param {number} options.lineDelay - Delay between each line, in ms.\n     * @param {number} options.progressLength - Number of characters displayed as progress bar.\n     * @param {string} options.progressChar – Character to use for progress bar, defaults to █.\n\t * @param {number} options.progressPercent - Max percent of progress.\n     * @param {string} options.cursor – Character to use for cursor, defaults to ▋.\n     * @param {Object[]} lineData - Dynamically loaded line data objects.\n     * @param {boolean} options.noInit - Don't initialise the animation.\n     */\n    constructor(container = '#termynal', options = {}) {\n        this.container = (typeof container === 'string') ? document.querySelector(container) : container;\n        this.pfx = `data-${options.prefix || 'ty'}`;\n        this.startDelay = options.startDelay\n            || parseFloat(this.container.getAttribute(`${this.pfx}-startDelay`)) || 600;\n        this.typeDelay = options.typeDelay\n            || parseFloat(this.container.getAttribute(`${this.pfx}-typeDelay`)) || 90;\n        this.lineDelay = options.lineDelay\n            || parseFloat(this.container.getAttribute(`${this.pfx}-lineDelay`)) || 1500;\n        this.progressLength = options.progressLength\n            || parseFloat(this.container.getAttribute(`${this.pfx}-progressLength`)) || 40;\n        this.progressChar = options.progressChar\n            || this.container.getAttribute(`${this.pfx}-progressChar`) || '█';\n\t\tthis.progressPercent = options.progressPercent\n            || parseFloat(this.container.getAttribute(`${this.pfx}-progressPercent`)) || 100;\n        this.cursor = options.cursor\n            || this.container.getAttribute(`${this.pfx}-cursor`) || '▋';\n        this.lineData = this.lineDataToElements(options.lineData || []);\n        if (!options.noInit) this.init()\n    }\n\n    /**\n     * Initialise the widget, get lines, clear container and start animation.\n     */\n    init() {\n        // Appends dynamically loaded lines to existing line elements.\n        this.lines = [...this.container.querySelectorAll(`[${this.pfx}]`)].concat(this.lineData);\n\n        /** \n         * Calculates width and height of Termynal container.\n         * If container is empty and lines are dynamically loaded, defaults to browser `auto` or CSS.\n         */ \n        const containerStyle = getComputedStyle(this.container);\n        this.container.style.width = containerStyle.width !== '0px' ? \n            containerStyle.width : undefined;\n        this.container.style.minHeight = containerStyle.height !== '0px' ? \n            containerStyle.height : undefined;\n\n        this.container.setAttribute('data-termynal', '');\n        this.container.innerHTML = '';\n        this.start();\n    }\n\n    /**\n     * Start the animation and rener the lines depending on their data attributes.\n     */\n    async start() {\n        await this._wait(this.startDelay);\n\n        for (let line of this.lines) {\n            const type = line.getAttribute(this.pfx);\n            const delay = line.getAttribute(`${this.pfx}-delay`) || this.lineDelay;\n\n            if (type == 'input') {\n                line.setAttribute(`${this.pfx}-cursor`, this.cursor);\n                await this.type(line);\n                await this._wait(delay);\n            }\n\n            else if (type == 'progress') {\n                await this.progress(line);\n                await this._wait(delay);\n            }\n\n            else {\n                this.container.appendChild(line);\n                await this._wait(delay);\n            }\n\n            line.removeAttribute(`${this.pfx}-cursor`);\n        }\n    }\n\n    /**\n     * Animate a typed line.\n     * @param {Node} line - The line element to render.\n     */\n    async type(line) {\n        const chars = [...line.textContent];\n        const delay = line.getAttribute(`${this.pfx}-typeDelay`) || this.typeDelay;\n        line.textContent = '';\n        this.container.appendChild(line);\n\n        for (let char of chars) {\n            await this._wait(delay);\n            line.textContent += char;\n        }\n    }\n\n    /**\n     * Animate a progress bar.\n     * @param {Node} line - The line element to render.\n     */\n    async progress(line) {\n        const progressLength = line.getAttribute(`${this.pfx}-progressLength`)\n            || this.progressLength;\n        const progressChar = line.getAttribute(`${this.pfx}-progressChar`)\n            || this.progressChar;\n        const chars = progressChar.repeat(progressLength);\n\t\tconst progressPercent = line.getAttribute(`${this.pfx}-progressPercent`)\n\t\t\t|| this.progressPercent;\n        line.textContent = '';\n        this.container.appendChild(line);\n\n        for (let i = 1; i < chars.length + 1; i++) {\n            await this._wait(this.typeDelay);\n            const percent = Math.round(i / chars.length * 100);\n            line.textContent = `${chars.slice(0, i)} ${percent}%`;\n\t\t\tif (percent>progressPercent) {\n\t\t\t\tbreak;\n\t\t\t}\n        }\n    }\n\n    /**\n     * Helper function for animation delays, called with `await`.\n     * @param {number} time - Timeout, in ms.\n     */\n    _wait(time) {\n        return new Promise(resolve => setTimeout(resolve, time));\n    }\n\n    /**\n     * Converts line data objects into line elements.\n     * \n     * @param {Object[]} lineData - Dynamically loaded lines.\n     * @param {Object} line - Line data object.\n     * @returns {Element[]} - Array of line elements.\n     */\n    lineDataToElements(lineData) {\n        return lineData.map(line => {\n            let div = document.createElement('div');\n            div.innerHTML = `<span ${this._attributes(line)}>${line.value || ''}</span>`;\n\n            return div.firstElementChild;\n        });\n    }\n\n    /**\n     * Helper function for generating attributes string.\n     * \n     * @param {Object} line - Line data object.\n     * @returns {string} - String of attributes.\n     */\n    _attributes(line) {\n        let attrs = '';\n        for (let prop in line) {\n            attrs += this.pfx;\n\n            if (prop === 'type') {\n                attrs += `=\"${line[prop]}\" `\n            } else if (prop !== 'value') {\n                attrs += `-${prop}=\"${line[prop]}\" `\n            }\n        }\n\n        return attrs;\n    }\n}\n\n/**\n* HTML API: If current script has container(s) specified, initialise Termynal.\n*/\nif (document.currentScript.hasAttribute('data-termynal-container')) {\n    const containers = document.currentScript.getAttribute('data-termynal-container');\n    containers.split('|')\n        .forEach(container => new Termynal(container))\n}\n"]}